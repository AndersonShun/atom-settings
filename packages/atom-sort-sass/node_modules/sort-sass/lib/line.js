var Line, _;

_ = require('lodash');

Line = (function() {
  Line.prototype.types = ['empty', 'comment', 'import', 'function', 'control', 'mixin', 'variable', 'media', 'include', 'keyframes', 'selector', 'property'];

  Line.prototype.unimportantTypes = ['empty', 'comment'];

  Line.prototype.sortableTypes = ['include', 'property'];

  Line.prototype.sorterTypes = ['mixin', 'media', 'selector'];

  function Line(str) {
    this.str = str;
    this.indent = /^\s*/.exec(this.str)[0];
    this.str = this.str.trim();
    this.type = this.determineType();
    this.children = [];
  }

  Line.prototype.addChild = function(line) {
    line.parent = this;
    return this.children.push(line);
  };

  Line.prototype.propertyName = function() {
    if (this.type !== 'property') {
      return;
    }
    return this.str.split(':')[0];
  };

  Line.prototype.isUnimportant = function() {
    return this.unimportantTypes.indexOf(this.type) !== -1;
  };

  Line.prototype.isSortable = function() {
    return this.sortableTypes.indexOf(this.type) !== -1;
  };

  Line.prototype.shouldSortChildren = function() {
    return this.sorterTypes.indexOf(this.type) !== -1;
  };

  Line.prototype.determineType = function() {
    switch (false) {
      case this.str.length !== 0:
        return 'empty';
      case !_.startsWith(this.str, '//'):
        return 'comment';
      case !_.startsWith(this.str, '@import'):
        return 'import';
      case !_.startsWith(this.str, '@function'):
        return 'function';
      case !/^@(if|for|each|while)/.test(this.str):
        return 'control';
      case !/^(@mixin|=)/.test(this.str):
        return 'mixin';
      case !_.startsWith(this.str, '$'):
        return 'variable';
      case !_.startsWith(this.str, '@media'):
        return 'media';
      case !/^(@extend|\+)/.test(this.str):
        return 'include';
      case !_.startsWith(this.str, '@keyframes'):
        return 'keyframes';
      case !(/^(\.|#|\w|&|::|\*)/.test(this.str) && !_.includes(this.str, ': ')):
        return 'selector';
      case !/^([a-z\-]+):/.test(this.str):
        return 'property';
      default:
        return 'something';
    }
  };

  Line.prototype.toString = function() {
    return this.indent + this.str;
  };

  return Line;

})();

module.exports = Line;

var Line, Sorter, _, order;

_ = require('lodash');

Line = require('./line');

order = require('./order');

Sorter = (function() {
  Sorter.prototype.defaultOpts = {};

  function Sorter(sass, opts) {
    if (opts == null) {
      opts = {};
    }
    this.sass = sass.toString();
    this.opts = _.defaults({}, opts, this.defaultOpts);
  }

  Sorter.prototype.sort = function() {
    var lines, roots;
    lines = this.splitOnLines(this.sass);
    roots = this.generateTrees(lines);
    this.sortTrees(roots);
    return this.generateLines(roots).join('\n');
  };

  Sorter.prototype.splitOnLines = function(sass) {
    return sass.split('\n').map(function(str) {
      return new Line(str);
    });
  };

  Sorter.prototype.generateTrees = function(lines) {
    var prevLine;
    prevLine = null;
    return lines.reduce((function(_this) {
      return function(roots, line) {
        var parent;
        parent = _this.findParentFor(prevLine, line);
        if (parent != null) {
          parent.addChild(line);
        } else {
          roots.push(line);
        }
        if (!line.isUnimportant()) {
          prevLine = line;
        }
        return roots;
      };
    })(this), []);
  };

  Sorter.prototype.findParentFor = function(parent, line) {
    var condition;
    condition = line.isUnimportant() ? function() {
      return parent.isSortable();
    } : function() {
      return parent.indent.length >= line.indent.length;
    };
    while ((parent != null) && condition()) {
      parent = parent.parent;
    }
    return parent;
  };

  Sorter.prototype.sortTrees = function(roots) {
    var i, len, results, root;
    results = [];
    for (i = 0, len = roots.length; i < len; i++) {
      root = roots[i];
      results.push(this.sortTree(root));
    }
    return results;
  };

  Sorter.prototype.sortTree = function(root) {
    var child, index, ref, sortableChildren;
    if (!root.shouldSortChildren()) {
      return;
    }
    sortableChildren = [];
    index = 0;
    while (index < root.children.length) {
      child = root.children[index];
      index++;
      if (child.isUnimportant()) {
        continue;
      }
      if (!child.isSortable()) {
        break;
      }
      root.children.splice(index - 1, 1);
      index--;
      sortableChildren.push(child);
    }
    root.children.forEach((function(_this) {
      return function(child) {
        _this.sortTree(child);
        return true;
      };
    })(this));
    return (ref = root.children).unshift.apply(ref, this.sortChildren(sortableChildren));
  };

  Sorter.prototype.generateLines = function(roots, lines) {
    if (lines == null) {
      lines = [];
    }
    return roots.reduce((function(_this) {
      return function(result, root) {
        result.push(root.toString());
        _this.generateLines(root.children, result);
        return result;
      };
    })(this), lines);
  };

  Sorter.prototype.sortChildren = function(children) {
    return children.sort(function(child1, child2) {
      var pos1, pos2;
      if (child1.type === 'include' && child2.type !== 'include') {
        return -1;
      }
      if (child1.type !== 'include' && child2.type === 'include') {
        return 1;
      }
      if (child1.type === 'include' && child2.type === 'include') {
        return 0;
      }
      pos1 = order.indexOf(child1.propertyName());
      pos2 = order.indexOf(child2.propertyName());
      if (pos1 !== -1 && pos2 !== -1) {
        return pos1 - pos2;
      }
      if (pos2 === -1) {
        return -1;
      }
      if (pos1 === -1) {
        return 1;
      }
      return 0;
    });
  };

  return Sorter;

})();

module.exports = Sorter;
